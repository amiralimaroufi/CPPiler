from collections import defaultdict

class ParseTable:
    def __init__(self):
        self.non_terminals = ['Start', 'S', 'N', 'M', 'T', 'V', 'Id', 'L', 'Z', 'Operation', 'P', 'O', 'W', 'Assign', 'Expression', 'K', 'Loop', 'Input', 'F', 'Output', 'H', 'C']
        self.terminals = [
            '#include', 'using', 'namespace', 'std', ';', 'int', 'float', 'main', 
            '(', ')', '{', '}', 'return', '0', 'while', 'cin', 'cout', '>>', '<<', 
            'string', 'number', 'identifier', '==', '>=', '<=', '!=', '+', '-', '*', 
            ',', '"', '$', '='  
        ]
        self.productions = {
            'Start': [['S', 'N', 'M']],
            'S': [['#include', 'S'], ['ε']],
            'N': [['using', 'namespace', 'std', ';'], ['ε']],
            'M': [['int', 'main', '(', ')', '{', 'T', 'V', '}']],
            'T': [['Id', 'T'], ['L', 'T'], ['Loop', 'T'], ['Input', 'T'], ['Output', 'T'], ['ε']],
            'V': [['return', '0', ';']],
            'Id': [['int', 'L'], ['float', 'L']],
            'L': [['identifier', 'Assign', 'Z']],
            'Z': [[',', 'identifier', 'Assign', 'Z'], [';']],
            'Operation': [['number', 'P'], ['identifier', 'P']],
            'P': [['O', 'W', 'P'], ['ε']],
            'O': [['+'], ['-'], ['*']],
            'W': [['number'], ['identifier']],
            'Assign': [['=', 'Operation'], ['ε']],
            'Expression': [['Operation', 'K', 'Operation']],
            'K': [['=='], ['>='], ['<='], ['!=']],
            'Loop': [['while', '(', 'Expression', ')', '{', 'T', '}']],
            'Input': [['cin', '>>', 'identifier', 'F', ';']],
            'F': [['>>', 'identifier', 'F'], ['ε']],
            'Output': [['cout', '<<', 'C', 'H', ';']],
            'H': [['<<', 'C', 'H'], ['ε']],
            'C': [['number'], ['string'], ['identifier']]
        }
        self.first = {}
        self.follow = {}
        self._compute_first()
        self._compute_follow()
        self.table = defaultdict(dict)
        self._build_table()

    def _compute_first(self):
        for terminal in self.terminals:
            self.first[terminal] = {terminal}
        
        for nt in self.non_terminals:
            self.first[nt] = set()
        
        updated = True
        while updated:
            updated = False
            for nt in self.non_terminals:
                for production in self.productions[nt]:
                    first_set = self._get_first_of_sequence(production)
                    if not first_set.issubset(self.first[nt]):
                        self.first[nt] |= first_set
                        updated = True

    def _get_first_of_sequence(self, sequence):
        first_set = set()
        for symbol in sequence:
            if symbol == 'ε':
                first_set.add('ε')
                break
            if symbol in self.terminals:
                first_set.add(symbol)
                break
            if symbol in self.non_terminals:
                first_set |= self.first[symbol] - {'ε'}
                if 'ε' not in self.first[symbol]:
                    break
        else:
            first_set.add('ε')
        return first_set

    def _compute_follow(self):
        for nt in self.non_terminals:
            self.follow[nt] = set()
        self.follow['Start'].add('$')
        
        updated = True
        while updated:
            updated = False
            for nt in self.non_terminals:
                for production in self.productions[nt]:
                    for i, symbol in enumerate(production):
                        if symbol in self.non_terminals:
                            next_symbols = production[i+1:]
                            first_of_next = self._get_first_of_sequence(next_symbols)
                            if 'ε' in first_of_next:
                                first_of_next.remove('ε')
                                if not first_of_next.issubset(self.follow[symbol]):
                                    self.follow[symbol] |= first_of_next | self.follow[nt]
                                    updated = True
                            else:
                                if not first_of_next.issubset(self.follow[symbol]):
                                    self.follow[symbol] |= first_of_next
                                    updated = True

    def _build_table(self):
        for nt in self.non_terminals:
            for production in self.productions.get(nt, []):
                first_alpha = self._get_first_of_sequence(production)
                for terminal in first_alpha:
                    if terminal != 'ε':
                        self.table[nt][terminal] = production
                if 'ε' in first_alpha:
                    for terminal in self.follow[nt]:
                        self.table[nt][terminal] = production

    def get_production(self, non_terminal, terminal):
        return self.table.get(non_terminal, {}).get(terminal, None)

    def display(self):
        print("\nParse Table:")
        print("Non-Terminal\tTerminal\tProduction")
        for nt in self.non_terminals:
            for t in self.terminals + ['$']:
                prod = self.table[nt].get(t, None)
                if prod:
                    print(f"{nt}\t\t{t}\t\t{' '.join(prod)}")
